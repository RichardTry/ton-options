

#pragma version >=0.2.0;
#include "op-codes.func";
#include "params.func";
#include "helpers.func";
#include "jetton-utils.func";

int equal_slices (slice a, slice b) asm "SDEQ";
;; int workchain() asm "0 PUSHINT";
slice null_addr() asm "b{00} PUSHSLICE";
(slice, ()) ~skip_coins(slice s) asm "4 LDU SWAP 3 LSHIFT# SDSKIPFIRST";


const op::buy_option = 3;
const op::close_option = 4;
const op::buy_position = 5;
const op::initial_setup = 6;

int op::transfer() asm "0xf8a7ea5 PUSHINT";
int op::transfer_notification() asm "0x7362d09c PUSHINT";

const int min_tons_for_storage = 10000000; ;; 0.01 TON
const int gas_consumption = 10000000; ;; 0.01 TON

(int, int, int, int, int, slice, slice, slice, int) load_data() inline {
  slice ds = get_data().begin_parse();
  return(
    ds~load_uint(32), ;; timestamp expiration
    ds~load_uint(32), ;; timestamp buying
    ds~load_coins(), ;; price
    ds~load_uint(32), ;; number
    ds~load_coins(), ;; option price
    ds~load_msg_addr(), ;; buyer addr
    ds~load_msg_addr(), ;; wallet addr
    ds~load_msg_addr(), ;; owner address
    ds~load_uint(1) ;; mode
  );
}

(cell) create_simple_transfer_body(int query_id, int fwd_amount, int jetton_amount, slice to) inline {
    return begin_cell()
        .store_uint(0xf8a7ea5, 32)
        .store_uint(query_id, 64)
        .store_coins(jetton_amount)
        .store_slice(to) ;; to_owner_address
        .store_slice(to)
        .store_uint(0, 1)
        .store_coins(fwd_amount) ;; forward_ton_amount
        .store_uint(0, 1)
      .end_cell();
}

() save_data (int timestamp_expiration, int timestamp_buying, int price, int number, int option_price, slice buyer_addr, slice wallet_addr, slice owner_addr, int mode) impure inline {
  set_data(
    begin_cell().store_uint(timestamp_expiration, 32)
                .store_uint(timestamp_buying, 32)
                .store_coins(price)
                .store_uint(number, 32)
                .store_coins(option_price)
                .store_slice(buyer_addr)
                .store_slice(wallet_addr)
                .store_slice(owner_addr)
                .store_uint(mode, 1)
    .end_cell()
  );
}

() send_message_with_text(int amount, slice to, slice text, int mode) impure inline_ref {
    cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to)
        .store_coins(amount)
        .store_uint(0, 107)
        .store_uint(0, 32)
        .store_slice(text)
    .end_cell();
    send_raw_message(msg, mode);
}

() send_message_nobounce(int amount, slice to, cell body, int mode) impure inline_ref {
    cell msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(to)
        .store_coins(amount)
        .store_uint(1, 107)
        .store_ref(body)
    .end_cell();
    send_raw_message(msg, mode);
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore empty messages
    return ();
  }

  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  if (flags & 1) {
    return ();
  }
  slice sender_address = cs~load_msg_addr();
  cs~load_msg_addr(); ;; skip dst
  cs~load_coins(); ;; skip value
  cs~skip_bits(1); ;; skip extracurrency collection
  cs~load_coins(); ;; skip ihr_fee
  int fwd_fee = cs~load_coins(); ;; we use message fwd_fee for estimation of forward_payload costs

  int op = in_msg_body~load_uint(32);

  (int timestamp, int timestamp_buying, int price, int number, int option_price, slice buyer_addr, slice wallet_addr, slice owner_addr, int mode) = load_data();

  if (op == op::buy_option) { ;; outgoing transfer
    throw_unless(111, now() < timestamp_buying);
    throw_unless(112, equal_slices(buyer_addr, null_addr()));
    throw_unless(114, msg_value > option_price);

    slice new_buyer = in_msg_body~load_msg_addr();


    save_data(timestamp, timestamp_buying, price, number, option_price, new_buyer, wallet_addr, owner_addr, mode);

    send_message_with_text(option_price, owner_addr, "KUPILI KRASAVA", 0);
    return ();
  }

  if (op == op::buy_position) { ;; incoming transfer
    throw_unless(115, msg_value > price * number);
    throw_unless(116, mode == 0);
    throw_unless(117, equal_slices(buyer_addr, sender_address));

    send_message_with_text(price * number, owner_addr, "PRODAL KRASAVA", 1);

    cell msg_body = create_simple_transfer_body(0, 50000000, number, buyer_addr);

    send_message_nobounce(0, wallet_addr, msg_body, 128);
                              

    return ();
  }

  if (op == op::transfer_notification())
  {
    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    slice from = in_msg_body~load_msg_addr();
    if (equal_slices(buyer_addr, null_addr()) & equal_slices(wallet_addr, null_addr()))
    {
      throw_unless(121, jetton_amount > number);
      ;; throw_unless(125, equal_slices(owner_addr, from));
      slice new_wallet_addr = sender_address;
      save_data(timestamp, timestamp_buying, price, number, option_price, buyer_addr, new_wallet_addr, owner_addr, mode);
      return();
    }
    throw_unless(119, equal_slices(buyer_addr, from));
    throw_unless(120, jetton_amount > number * price);
    throw_unless(126, mode == 1);

    send_message_with_text(number, buyer_addr, "KUPIL KRASAVA", 1);

    cell msg_body = create_simple_transfer_body(0, 50000000, number * price, owner_addr);

    send_message_nobounce(0, wallet_addr, msg_body, 128);
    return();
  }

  if (op == 1)
  {
    throw_unless(118, equal_slices(wallet_addr, null_addr()));
    if (mode == 1)
    {
      throw_unless(122, msg_value > number);
    }
    slice jetton_master = in_msg_body~load_msg_addr();
    wallet_addr = calculate_jetton_wallet_address(calculate_jetton_wallet_state_init(my_address(), jetton_master, jetton_code()));
    save_data(timestamp, timestamp_buying, price, number, option_price, buyer_addr, wallet_addr, owner_addr, mode);
    return();
  }

  throw(0xffff);
}

slice get_jetton_wallet() method_id {
  (int timestamp, int timestamp_buying, int price, int number, int option_price, slice buyer_addr, slice wallet_addr, slice owner_addr, int mode) = load_data();
  return wallet_addr;
}

int get_option_price() method_id {
  (int timestamp, int timestamp_buying, int price, int number, int option_price, slice buyer_addr, slice wallet_addr, slice owner_addr, int mode) = load_data();
  return option_price;
}