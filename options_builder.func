;; Jettons minter smart contract

;; storage scheme
;; storage#_ total_supply:Coins admin_address:MsgAddress content:^Cell jetton_wallet_code:^Cell = Storage;

#pragma version >=0.2.0;
#include "op-codes.func";
#include "params.func";
#include "helpers.func";
#include "jetton-utils.func";

slice null_addr() asm "b{00} PUSHSLICE";

const op::initial_setup = 1;

const op::create_options = 2;

(cell) load_data() inline {
  slice ds = get_data().begin_parse();
  return (
      ds~load_ref()
  );
}

() save_data(cell option_code) impure inline {
  set_data(begin_cell()
            .store_ref(option_code)
           .end_cell()
          );
}

cell pack_option_data(int timestamp_expiration, int timestamp_buying, int price, int number, int option_price, slice owner_addr, int mode)
{
  return begin_cell().store_uint(timestamp_expiration, 32)
                  .store_uint(timestamp_buying, 32)
                  .store_coins(price)
                  .store_uint(number, 32)
                  .store_coins(option_price)
                  .store_slice(null_addr())
                  .store_slice(null_addr())
                  .store_slice(owner_addr)
                  .store_uint(mode, 1)
                .end_cell();
}

cell option_state_init(int timestamp_expiration, int timestamp_buying, int price, int number, int option_price, slice owner_addr, int mode, cell option_code) impure inline {
  return begin_cell()
          .store_uint(0, 2)
          .store_dict(option_code)
          .store_dict(pack_option_data(timestamp_expiration, timestamp_buying, price, number, option_price, owner_addr, mode))
          .store_uint(0, 1)
         .end_cell();
}

slice calculate_option_address(cell state_init) inline {
  return begin_cell().store_uint(4, 3)
                     .store_int(workchain, 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

() send_message_with_stateinit(int amount, slice to, cell state_init, cell body, int mode) impure inline_ref {
    cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to)
        .store_coins(amount)
        .store_uint(7, 108)
        .store_ref(state_init)
        .store_ref(body)
    .end_cell();
    send_raw_message(msg, mode);
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
  
    int op = in_msg_body~load_uint(32);

    (cell option_code) = load_data();

    if (op == 2) {
        int timestamp_expiration = in_msg_body~load_uint(32);
        int timestamp_buying = in_msg_body~load_uint(32);
        int price = in_msg_body~load_coins();
        int number = in_msg_body~load_uint(32);
        int option_price = in_msg_body~load_coins();
        ;; slice buyer_addr = in_msg_body~load_msg_addr();
        int mode = in_msg_body~load_uint(1);
        slice jetton_master = in_msg_body~load_msg_addr();
        cell state_init =  option_state_init(timestamp_expiration, timestamp_buying, price, number, option_price, sender_address, mode, option_code);
        cell body = begin_cell().store_uint(op::initial_setup, 32).store_slice(jetton_master).end_cell();

        slice option_addr = calculate_option_address(state_init);

        send_message_with_stateinit(0, option_addr, state_init, body, 64);
        return();
    }


    throw(0xffff);
}

int get_version() method_id {
  return 1;
}